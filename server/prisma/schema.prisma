// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phoneCountry String?
  phoneNumber String?
  addressStreet String?
  addressHouseNumber String?
  addressLandmark String?
  addressCity String?
  addressState String?
  addressCountry String?
  addressPostalCode String?
  bio String?
  rentals Rental[]
  reviews Review[]
  items Item[]
  userChats Chat[] @relation("UserChats")
  ownerChats Chat[] @relation("OwnerChats")
  messages Message[]
}

model Rental {
  id Int @id @default(autoincrement())
  userId Int
  itemId Int
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    RentalStatus @default(PENDING)
  item Item @relation(fields: [itemId], references: [id])
  user User @relation(fields: [userId], references: [id])
  payment Payment?
}
model Item {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  ownerId    Int
  owner      User      @relation(fields: [ownerId], references: [id])
  pricePerDay Float
  available   Boolean   @default(true)
  rentals     Rental[]
  reviews     Review[]
  categoryId Int
  category   Category? @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  imageUrl   String?
  location   String?
  chats      Chat[]    @relation("ItemChats")
}

model Payment {
  id         Int       @id @default(autoincrement())
  rentalId   Int @unique
  amount     Float
  paymentDate DateTime
  method     String

  rental     Rental  @relation(fields: [rentalId], references: [id])
}
model Review {
  id      Int     @id @default(autoincrement())
  userId  Int
  itemId  Int
  rating  Int     @default(5)
  comment String?

  user    User    @relation(fields: [userId], references: [id])
  item    Item    @relation(fields: [itemId], references: [id])
}
model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  items Item[]
}

model Chat {
  id         Int      @id @default(autoincrement())
  propertyId Int
  property   Item     @relation("ItemChats", fields: [propertyId], references: [id])
  userId     Int
  user       User     @relation("UserChats", fields: [userId], references: [id])
  ownerId    Int
  owner      User     @relation("OwnerChats", fields: [ownerId], references: [id])
  messages   Message[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, userId, ownerId])
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  senderId  Int
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

enum RentalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}
